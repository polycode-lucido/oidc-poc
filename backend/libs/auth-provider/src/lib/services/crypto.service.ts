import { Injectable } from '@nestjs/common';
import { createHash } from 'crypto';
import * as bcrypt from 'bcrypt';

@Injectable()
export class CryptoService {
  private readonly numberOfRounds = 10;

  /**
   * It takes a string as input, and returns a string
   * @param {string} input - The string to be hashed.
   * @returns The hash256 function is returning the hash of the input string.
   */
  hash256(input: string): string {
    return createHash('sha256').update(input).digest('hex');
  }

  /**
   * It takes a string as input, and returns a promise that resolves to a string
   * @param {string} input - The string to be hashed.
   * @returns A Promise that resolves to a string.
   */
  async hashBcrypt(input: string): Promise<string> {
    return bcrypt.hash(input, this.numberOfRounds);
  }

  /**
   * It takes a string and a hash, and returns a boolean
   * @param {string} input - The string to be hashed.
   * @param {string} hash - The hash that was generated by the bcrypt.hash() function.
   * @returns A promise that resolves to a boolean.
   */
  async compareBcrypt(input: string, hash: string): Promise<boolean> {
    return bcrypt.compare(input, hash);
  }
}
