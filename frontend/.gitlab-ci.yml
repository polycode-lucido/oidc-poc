variables:
  GIT_DEPTH: 0

stages:
  - preparation
  - build
  - release
  - package

include:
  - remote: "https://api.r2devops.io/job/r/r2devops-bot/gitleaks/1.0.0.yaml"

gitleaks:
  stage: .pre

determine_version:
  stage: preparation
  image:
    name: "gittools/gitversion:5.10.0-alpine.3.14-6.0"
    entrypoint: [""]
  only:
    - main
    - tags
  script: |
    echo "Determining version..."
    echo "GIT_DEPTH: ${GIT_DEPTH}"

    if [[ -z "${CI_COMMIT_TAG}" ]]; then
      echo "MajorMinorPatch: $(/tools/dotnet-gitversion /showvariable MajorMinorPatch)"
      /tools/dotnet-gitversion /showvariable MajorMinorPatch > SemVer.txt
      echo "-rc" >> SemVer.txt
      /tools/dotnet-gitversion /showvariable CommitsSinceVersionSource >> SemVer.txt
      echo "." >> SemVer.txt
      /tools/dotnet-gitversion /showvariable EscapedBranchName >> SemVer.txt
      echo "." >> SemVer.txt
      /tools/dotnet-gitversion /showvariable ShortSha >> SemVer.txt
    else
      echo "CommitTag: ${CI_COMMIT_TAG}"
      echo "${CI_COMMIT_TAG}" | tr -d 'v' | tr -d '\n\r' | cat > SemVer.txt
    fi

    echo "BUILD_VERSION=$(cat SemVer.txt | tr -d '\n\r' | cat)" > build.env
    echo "BUILD_DATE=$(date)" >> build.env
    echo "BUILD_HASH=$(git rev-parse --short HEAD)" >> build.env
    echo "BUILD_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> build.env
    echo "BUILD_TAG=$(git describe --tags)" >> build.env
    cat build.env
  artifacts:
    reports:
      dotenv: build.env

docker_build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.5.1-debug
    entrypoint: ['']
  variables:
    DOCKERFILE_PATH: Dockerfile
  script: |
    mkdir -p /kaniko/.docker/

    if [[ -n "${CI_COMMIT_TAG}" || "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      REGISTRY_DESTINATION="--destination ${NEXUS_DOCKER_URL}/do-polycode/frontend:${BUILD_VERSION}"
    else
      REGISTRY_DESTINATION="--no-push --cache-repo ${NEXUS_DOCKER_URL}/do-polycode/frontend/cache"
    fi

    DOCKER_CONTEXT_PATH=${CI_PROJECT_DIR}/
    echo "{\"auths\":{\"$NEXUS_DOCKER_URL\":{\"username\":\"$NEXUS_DOCKER_USER\",\"password\":\"$NEXUS_DOCKER_PASSWORD\"}}}" > /kaniko/.docker/config.json
    /kaniko/executor --context ${DOCKER_CONTEXT_PATH} --dockerfile ${DOCKER_CONTEXT_PATH}/${DOCKERFILE_PATH} --verbosity=info --cache=true --cache-ttl=336h --use-new-run --snapshotMode=redo ${REGISTRY_DESTINATION}

bump_version:
  stage: release
  image: node:16-buster-slim
  only:
    - main
    - tags
  variables:
    GIT_PUSH_COMMIT_NAME: "chore: bump app version to ${BUILD_VERSION} [skip ci]"
  before_script:
    - apt-get update -y && apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )"

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config user.name "polycode.bot"
    - git config user.email "bot@polycode.do-2021.fr"
  script: |
    eval $(ssh-agent -s)
    echo "$GITLAB_GIT_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    git pull "git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git" ${CI_COMMIT_BRANCH:-main} --rebase --autostash -Xours

    echo "VERSION=$BUILD_VERSION"

    sed -i "/\"version\":/c\  \"version\": \"$BUILD_VERSION\"," package.json
    sed -i "/appVersion:/c\appVersion: \'$BUILD_VERSION\'" ./helm/chart/Chart.yaml
    sed -i "/version:/c\version: \'$BUILD_VERSION\'" ./helm/chart/Chart.yaml

    if [[ ! -z "${CI_COMMIT_TAG}" ]]; then
      npm install -g conventional-changelog-cli
      conventional-changelog -p angular -i CHANGELOG.md -s
    fi

    git commit -a -m "${GIT_PUSH_COMMIT_NAME}"
    git push "git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git" HEAD:${CI_COMMIT_BRANCH:-main}

helm-package:
  stage: package
  image:
    name: alpine/helm:3.5.3
    entrypoint: ['']
  variables:
    CHART: frontend
    CI_REGISTRY_USER: gitlab-ci-token
    CI_REGISTRY_PASSWORD: ${CI_JOB_TOKEN}
  only:
    - main
    - tags
  before_script:
    - apk add git
    - helm plugin install --version=v0.10.2 https://github.com/chartmuseum/helm-push.git
    - >
      helm repo add ${CHART}-all
      --username ${CI_REGISTRY_USER}
      --password ${CI_REGISTRY_PASSWORD}
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/all
    - >
      helm repo add ${CHART}-latest-stable
      --username ${CI_REGISTRY_USER}
      --password ${CI_REGISTRY_PASSWORD}
      ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/latest-stable
  script: |
    sed -i "/appVersion:/c\appVersion: \'$BUILD_VERSION\'" ${CI_PROJECT_DIR}/helm/chart/Chart.yaml
    sed -i "/version:/c\version: \'$BUILD_VERSION\'" ${CI_PROJECT_DIR}/helm/chart/Chart.yaml
    helm package ${CI_PROJECT_DIR}/helm/chart
    helm cm-push ${CI_PROJECT_DIR}/${CHART}-${BUILD_VERSION}.tgz ${CHART}-all
    if [ $CI_COMMIT_BRANCH = 'main' ]; then
      sed -i "/appVersion:/c\appVersion: \'0.0.0\'" ${CI_PROJECT_DIR}/helm/chart/Chart.yaml
      sed -i "/version:/c\version: \'0.0.0\'" ${CI_PROJECT_DIR}/helm/chart/Chart.yaml
      helm package ${CI_PROJECT_DIR}/helm/chart
      helm cm-push ${CI_PROJECT_DIR}/${CHART}-0.0.0.tgz ${CHART}-latest-stable
    fi
